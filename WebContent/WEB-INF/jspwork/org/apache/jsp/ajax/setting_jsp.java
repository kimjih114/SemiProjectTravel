/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-08-18 06:31:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import user.model.vo.User;
import sns.model.service.SNSService;
import sns.model.vo.ProfileSNS;

public final class setting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("user.model.vo.User");
    _jspx_imports_classes.add("sns.model.service.SNSService");
    _jspx_imports_classes.add("sns.model.vo.ProfileSNS");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	User userLoggedIn = (User)session.getAttribute("userLoggedIn");
	ProfileSNS profile = new SNSService().selectOneProfile(userLoggedIn.getUserId());


      out.write("\r\n");
      out.write(" <style>\r\n");
      out.write("#setting-container {\r\n");
      out.write("\twidth:1000px;\r\n");
      out.write("\tmargin:0 auto;\r\n");
      out.write("\ttext-align:center;\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\tleft:220px;\r\n");
      out.write("\ttransition: 0.5s;\r\n");
      out.write("\ttop:50px;\r\n");
      out.write("}\r\n");
      out.write(".sectionTitle{\r\n");
      out.write("\tfont-size: 1.5em;\r\n");
      out.write("\tfont-weight: 700px;\r\n");
      out.write("\tfloat:left;\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write(".sectionContent{\r\n");
      out.write("\tmargin-left:20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#setting-container td{\r\n");
      out.write("\tfloat:left;\r\n");
      out.write("\tpadding:10px;\r\n");
      out.write("\tmarign:10px;\r\n");
      out.write("}\r\n");
      out.write(".header-profile-circle{\r\n");
      out.write("\tmargin-right: 5px;\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("\tborder-radius : 100%;\r\n");
      out.write("}\r\n");
      out.write("#namePanel{\r\n");
      out.write("\tbackground: white;\r\n");
      out.write("\tz-index:1;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#profileSection{\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#namePanel{\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\tleft:205px;\r\n");
      out.write("\ttop:19px;\r\n");
      out.write("\twidth:100px;\r\n");
      out.write("\tpadding:0px;\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write(" \r\n");
      out.write(" </style>\r\n");
      out.write(" <div id=\"setting-container\">\r\n");
      out.write(" <form action=\"\">\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t<span class=\"sectionTitle\">프로필 수정</span>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"sectionContent\">닉네임\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"text\" name=\"SmodifyNick\" id=\"SmodifyNick\" value=\"");
      out.print(profile.getProfileUserNickname() );
      out.write("\" />\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"sectionContent\" id=\"profileSection\">\r\n");
      out.write("\t\t\t\t\t\t\t<img src='");
      out.print(request.getContextPath() );
      out.write("/upload/profile/");
      out.print(profile.getProfileRenamedFilename() );
      out.write("' class='header-profile-circle'  width='40' height='40' />\r\n");
      out.write("\t\t\t\t\t\t\t프로필 이미지\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"file\" name=\"SmodifyProfile\" id=\"SmodifyProfile\" />\r\n");
      out.write("\t\t\t\t\t\t\t<div id=\"namePanel\">");
      out.print(profile.getProfileOriginalFilename() );
      out.write("</div>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t<span class=\"sectionTitle\">레이아웃</span>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"sectionContent\">헤더 이미지\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"file\" name=\"SmodifyHeader\" id=\"SmodifyHeader\" />\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"sectionContent\">테마\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
